{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,S,0BCAO,SAASC,EAAqBC,EAAKC,GACtC,IACAC,EAQEF,EARFE,aACAC,EAOEH,EAPFG,aACAC,EAMEJ,EANFI,WACAC,EAKEL,EALFK,cACAC,EAIEN,EAJFM,UACAC,EAGEP,EAHFO,SACAC,EAEER,EAFFQ,MACAC,EACET,EADFS,WAGIC,EAAaJ,EAAUK,KAAI,SAAAC,G,OAAMX,EAAOW,E,IAC9C,MAAO,0FACqEC,OAAvBR,EAAc,WAEzBQ,OAFkCL,EAAM,uHAM5BK,OAJZL,EAAM,4OAQsBK,OAJhBX,EAAa,0OAIyFW,OAAtFV,EAAa,2EAI/BU,OAJwGT,EAAW,6NAQxHS,OAJKJ,EAAW,4MAQlBI,OAJEH,EAAW,uKAKaG,OAD1BN,EAAS,iFACwBM,OAAPb,EAAIY,GAAG,iE,kBDjC1EE,EAAcC,SAASC,cAAc,kB,SAE5BC,I,OAAAA,EAAfC,EAAArB,EAAA,CAAAqB,EAAAC,GAAAC,MAAA,SAAAC,I,IAEQpB,EACEqB,EAOAC,EAOAC,E,kFAfFvB,EAAS,G,UACM,EAAAwB,EAAAC,wB,cAAbJ,EAAIK,EAAAC,K,UACe,EAAAH,EAAAI,6B,OAATF,EAAAC,KAELE,SAAQ,SAAAC,GACjB9B,EAAO8B,EAAMnB,IAAMmB,EAAMC,I,IAGrBT,EAAaU,KAAKC,SAAWZ,EAAKa,OAExCrB,EAAYsB,mBACV,YACArC,EAAqBuB,EAAKe,QAAQd,GAAatB,KAG3CuB,EAAST,SAASC,cAAc,eAE/BsB,iBAAiB,SAAS,WAC/B,IAAMC,EAAQf,EAAOgB,QAAQC,QAC7BC,aAAaC,QAAQ,UAAWJ,GAChCK,QAAQC,IAAI,kCAAmCN,E,sDAGjDK,QAAQC,IAAGlB,EAAAmB,I,2DAzBiBC,MAAAC,KAAAC,U,aAAjBhC,EAAiB8B,MAAAC,KAAAC,U,CA6BhCC,E","sources":["src/index.js","src/createUpcomingMarkup.js"],"sourcesContent":["import { upcomingMovieRequest } from './fetch';\nimport { createUpcomingMarkup } from './createUpcomingMarkup';\nimport { upcomingMovieGenreRequest } from './fetch';\n\nconst upcomingBox = document.querySelector('.upcom-js-list');\n\nasync function initUpcomingFetch() {\n  try {\n    let genres = {};\n    const data = await upcomingMovieRequest();\n    const genresData = await upcomingMovieGenreRequest();\n\n    genresData.forEach(genre => {\n      genres[genre.id] = genre.name;\n    });\n\n    const randomData = Math.random() * data.length; \n\n    upcomingBox.insertAdjacentHTML(\n      'beforeend',\n      createUpcomingMarkup(data.results[randomData], genres)\n    );\n\n    const button = document.querySelector('.upcom-btn');\n\n    button.addEventListener('click', () => {\n      const movId = button.dataset.movieId;\n      localStorage.setItem('movieId', movId);\n      console.log('Movie ID added to localStorage:', movId);\n    });\n  } catch (err) {\n    console.log(err);\n  }\n}\n\ninitUpcomingFetch();\n\n// upcomingMovieRequest()\n//     .then(data => {\n//         console.log(data.results[0]);\n//         if (data.length === 0 || data === undefined) {\n//             Notiflix.Notify.failure(\n//                 \"Sorry, something went wrong.\"\n//             );\n//             return;\n//         }\n\n//         upcomingBox.insertAdjacentHTML(\n//             'beforeend',\n//             createUpcomingMarkup(data.results[0])\n//         );\n//     });\n","export function createUpcomingMarkup(arr, genres) {\n    const {\n    release_date,\n    vote_average,\n    vote_count,\n    backdrop_path,\n    genre_ids,\n    overview,\n    title,\n    popularity,\n  } = arr;\n\n  const genreNames = genre_ids.map(id => genres[id]);\n  return `<div class=\"upcoming-container\">\n        <img src=\"https://image.tmdb.org/t/p/original${backdrop_path}\" alt=\"${title}\" class=\"upcom-img\" /> \n        <div class=\"upcoming-container-about\">\n            <h3 class=\"upcom-movie-title\">${title}</h3>\n                <ul class=\"upcoming-list\">\n                    <li class=\"upcoming-list-item\">\n                        <p class=\"upcom-movie-subtitle\">Release date</p>\n                        <p class=\"upcom-release-date\">${release_date}</p>\n                    </li>\n                    <li class=\"upcoming-list-item\">\n                        <p class=\"upcom-movie-subtitle\">Vote / Votes</p>\n                        <p class=\"upcom-vote\"><span class=\"vote-span\">${vote_average}</span> <span class=\"slash\">&nbsp/&nbsp</span> <span class=\"vote-span\">${vote_count}</span></p>\n                    </li>\n                    <li class=\"upcoming-list-item\">\n                        <p class=\"upcom-movie-subtitle\">Popularity</p>\n                        <p class=\"upcom-popularity\">${popularity}</p>\n                    </li>\n                    <li class=\"upcoming-list-item\">\n                        <p class=\"upcom-movie-subtitle\">Genre</p>\n                        <p class=\"upcom-genre\">${genreNames}</p>\n                    </li>\n                </ul>\n                <p class=\"upcom-movie-about-title\">ABOUT</p>\n                <p class=\"upcom-movie-about\">${overview}</p>\n                <button type=\"button\" class=\"upcom-btn\" data-movie-id=\"${arr.id}\">Add to my library</button>\n            </div>\n      </div>`;\n}\n\n// export function addToFavorites(e) {\n//   const movieId = e.target.dataset.movieId;\n// }\n\n//   export function createUpcomingMarkup(arr, genres) {\n// const { release_date, vote_average, vote_count, backdrop_path, genre_ids, overview, title, popularity } = arr;\n// const genreNames = genre_ids.map(id => genres[id]);\n// return `<img src=\"https://image.tmdb.org/t/p/original${backdrop_path}\" alt=\"${title}\" class=\"upcom-img\" />\n//     <h3 class=\"upcom-movie-title\">${title}</h3>\n//     <div class=\"upcoming-box\">\n//         <div class=\"upcom-about-box\">\n//             <p class=\"upcom-movie-subtitle\">Release date</p>\n//             <p class=\"upcom-movie-subtitle\">Vote / Votes</p>\n//             <p class=\"upcom-movie-subtitle\">Popularity</p>\n//             <p class=\"upcom-movie-subtitle\">Genre</p>\n//         </div>\n//         <div class=\"upcom-about-box-api\">\n//             <p class=\"upcom-release-date\">${release_date}</p>\n//             <p class=\"upcom-vote\"><span class=\"vote-span\">${vote_average}</span> <span class=\"slash\">&nbsp/&nbsp</span> <span class=\"vote-span\">${vote_count}</span></p>\n//             <p class=\"upcom-popularity\">${popularity}</p>\n//             <p class=\"upcom-genre\">${genreNames}</p>\n//         </div>\n//     </div>\n//     <p class=\"upcom-movie-about-title\">ABOUT</p>\n//     <p class=\"upcom-movie-about\">${overview}</p>\n//   <button type=\"button\" class=\"upcom-btn\">Add to my library</button>`};\n\n// let genres = {};\n\n// upcomingMovieGenreRequest()\n//     .then(data => {\n//         data.forEach(genre => {\n//             genres[genre.id] = genre.name;\n//         })\n//     })\n//     .catch(err => {\n//         console.log(err);\n//     });\n\n//     console.log(genres);\n"],"names":["$bpxeT","parcelRequire","$468a2107719aa245$export$cd48643e37787b49","arr","genres","release_date","vote_average","vote_count","backdrop_path","genre_ids","overview","title","popularity","genreNames","map","id","concat","$b8f9b7833fa37166$var$upcomingBox","document","querySelector","$b8f9b7833fa37166$var$_initUpcomingFetch","$parcel$interopDefault","$2TvXO","mark","_callee","data","randomData","button","$1oHQO","upcomingMovieRequest","_ctx","sent","upcomingMovieGenreRequest","forEach","genre","name","Math","random","length","insertAdjacentHTML","results","addEventListener","movId","dataset","movieId","localStorage","setItem","console","log","t0","apply","this","arguments","$b8f9b7833fa37166$var$initUpcomingFetch"],"version":3,"file":"index.26f23fc6.js.map"}